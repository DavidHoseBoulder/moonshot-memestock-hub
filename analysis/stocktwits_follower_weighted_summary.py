#!/usr/bin/env python3
"""Compute follower-weighted StockTwits sentiment aggregates using the calibration export.

Reads `analysis/stocktwits_reddit_calibration.csv` (generated by
`analysis/stocktwits_reddit_calibration.sql`) and prints:
  • Number of ticker-days examined
  • Correlation between Reddit average score and StockTwits simple average
  • Correlation between Reddit average score and follower-weighted average
  • Average follower coverage and message counts
The script is a quick prototype for comparing follower-weighted scores to
our Reddit baseline; it can be extended to emit CSV/JSON if desired.
"""

from pathlib import Path
import csv
import math
from collections import defaultdict

CAL_PATH = Path(__file__).with_name("stocktwits_reddit_calibration.csv")
if not CAL_PATH.exists():
    raise SystemExit(f"Calibration export not found: {CAL_PATH}")

agg = defaultdict(lambda: {
    "follower_sum": 0,
    "weighted_sum": 0,
    "simple_sum": 0,
    "count": 0,
    "reddit": None,
})

with CAL_PATH.open() as f:
    reader = csv.DictReader(f)
    for row in reader:
        key = (row["day"], row["symbol"])
        followers = int(row["st_followers"]) if row.get("st_followers") else 0
        label = (row.get("st_label") or "").upper()
        if label == "BULLISH":
            st_val = 1
        elif label == "BEARISH":
            st_val = -1
        else:
            st_val = 0
        reddit = row.get("reddit_avg_score")
        reddit_val = float(reddit) if reddit not in (None, "") else None

        bucket = agg[key]
        bucket["follower_sum"] += followers
        bucket["weighted_sum"] += st_val * followers
        bucket["simple_sum"] += st_val
        bucket["count"] += 1
        if bucket["reddit"] is None and reddit_val is not None:
            bucket["reddit"] = reddit_val

records = []
for (day, symbol), data in agg.items():
    if data["count"] == 0:
        continue
    follower_sum = data["follower_sum"]
    weighted_avg = (data["weighted_sum"] / follower_sum) if follower_sum > 0 else None
    records.append({
        "day": day,
        "symbol": symbol,
        "messages": data["count"],
        "simple_avg": data["simple_sum"] / data["count"],
        "weighted_avg": weighted_avg,
        "follower_sum": follower_sum,
        "reddit_avg": data["reddit"],
    })

def corr(pairs):
    if len(pairs) < 2:
        return None
    xs = [x for x, _ in pairs]
    ys = [y for _, y in pairs]
    mean_x = sum(xs) / len(xs)
    mean_y = sum(ys) / len(ys)
    num = sum((x - mean_x) * (y - mean_y) for x, y in pairs)
    den_x = math.sqrt(sum((x - mean_x) ** 2 for x in xs))
    den_y = math.sqrt(sum((y - mean_y) ** 2 for y in ys))
    if den_x == 0 or den_y == 0:
        return None
    return num / (den_x * den_y)

simple_pairs = [
    (r["reddit_avg"], r["simple_avg"])
    for r in records
    if r["reddit_avg"] is not None
]
weighted_pairs = [
    (r["reddit_avg"], r["weighted_avg"])
    for r in records
    if r["reddit_avg"] is not None and r["weighted_avg"] is not None
]

print(f"ticker_days: {len(records)}")
print(f"simple_vs_reddit_corr: {corr(simple_pairs):.6f}")
print(f"weighted_vs_reddit_corr: {corr(weighted_pairs):.6f}")
print(f"avg_follower_sum: {sum(r['follower_sum'] for r in records) / len(records):.2f}")
print(f"avg_messages_per_day: {sum(r['messages'] for r in records) / len(records):.2f}")
print(f"records_with_weighted: {len(weighted_pairs)}")
